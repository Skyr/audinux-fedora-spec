From c68c91d84c852f68b72600d87997ba864f270b67 Mon Sep 17 00:00:00 2001
From: Yann Collette <ycollette.nospam@free.fr>
Date: Sun, 16 Oct 2022 21:09:33 +0200
Subject: [PATCH] aarch64

---
 RPJ_plugin/dsp/third-party/src/SqMath.h | 3 ++-
 RPJ_plugin/dsp/utils/LookupTable.h      | 3 ++-
 RPJ_plugin/src/dep/dr_flac.h            | 8 +++++---
 RPJ_plugin/src/dep/dr_mp3.h             | 5 +++--
 dep/nanovg/src/stb_image.h              | 3 ++-
 dep/pffft/pffft.c                       | 3 ++-
 6 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/RPJ_plugin/dsp/third-party/src/SqMath.h b/RPJ_plugin/dsp/third-party/src/SqMath.h
index 3bc23d3..09b623a 100644
--- a/RPJ_plugin/dsp/third-party/src/SqMath.h
+++ b/RPJ_plugin/dsp/third-party/src/SqMath.h
@@ -1,7 +1,8 @@
 #pragma once
 
 #include "rack.hpp"
-#include <immintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/avx.h>
 #include <random>
 #if !defined(M_PI)
 #define M_PI float(3.14159265358979323846264338327950288)
diff --git a/RPJ_plugin/dsp/utils/LookupTable.h b/RPJ_plugin/dsp/utils/LookupTable.h
index f46a3e1..5b78da7 100644
--- a/RPJ_plugin/dsp/utils/LookupTable.h
+++ b/RPJ_plugin/dsp/utils/LookupTable.h
@@ -7,7 +7,8 @@
 #include <assert.h>
 #include <cmath>
 #include <memory>
-#include <emmintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/sse2.h>
 #include <functional>
 
 template <typename T> class LookupTableParams;
diff --git a/RPJ_plugin/src/dep/dr_flac.h b/RPJ_plugin/src/dep/dr_flac.h
index 387a6cd..51b4e8f 100644
--- a/RPJ_plugin/src/dep/dr_flac.h
+++ b/RPJ_plugin/src/dep/dr_flac.h
@@ -1214,9 +1214,11 @@ Unfortuantely dr_flac depends on this for a few things so we're just going to di
         #endif
 
         #if defined(DRFLAC_SUPPORT_SSE41)
-            #include <smmintrin.h>
+            #define SIMDE_ENABLE_NATIVE_ALIASES
+            #include <simde/x86/sse4.1.h>
         #elif defined(DRFLAC_SUPPORT_SSE2)
-            #include <emmintrin.h>
+            #define SIMDE_ENABLE_NATIVE_ALIASES
+            #include <simde/x86/sse2.h>
         #endif
     #endif
 
@@ -11950,4 +11952,4 @@ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
-*/
\ No newline at end of file
+*/
diff --git a/RPJ_plugin/src/dep/dr_mp3.h b/RPJ_plugin/src/dep/dr_mp3.h
index 28bb95d..ab998e9 100644
--- a/RPJ_plugin/src/dep/dr_mp3.h
+++ b/RPJ_plugin/src/dep/dr_mp3.h
@@ -599,7 +599,8 @@ DRMP3_API const char* drmp3_version_string(void)
 #if defined(_MSC_VER)
 #include <intrin.h>
 #endif
-#include <emmintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/sse2.h>
 #define DRMP3_HAVE_SSE 1
 #define DRMP3_HAVE_SIMD 1
 #define DRMP3_VSTORE _mm_storeu_ps
@@ -4784,4 +4785,4 @@ SOFTWARE.
     To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide.
     This software is distributed without any warranty.
     See <http://creativecommons.org/publicdomain/zero/1.0/>.
-*/
\ No newline at end of file
+*/
diff --git a/dep/nanovg/src/stb_image.h b/dep/nanovg/src/stb_image.h
index e06f7a1..c36f8ef 100644
--- a/dep/nanovg/src/stb_image.h
+++ b/dep/nanovg/src/stb_image.h
@@ -674,7 +674,8 @@ typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];
 
 #if !defined(STBI_NO_SIMD) && defined(STBI__X86_TARGET)
 #define STBI_SSE2
-#include <emmintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/sse2.h>
 
 #ifdef _MSC_VER
 
diff --git a/dep/pffft/pffft.c b/dep/pffft/pffft.c
index 1686e15..c76b964 100644
--- a/dep/pffft/pffft.c
+++ b/dep/pffft/pffft.c
@@ -130,7 +130,8 @@ inline v4sf ld_ps1(const float *p) { v4sf v=vec_lde(0,p); return vec_splat(vec_p
 */
 #elif !defined(PFFFT_SIMD_DISABLE) && (defined(__x86_64__) || defined(_M_X64) || defined(i386) || defined(_M_IX86))
 
-#include <xmmintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/sse.h>
 typedef __m128 v4sf;
 #  define SIMD_SZ 4 // 4 floats by simd vector -- this is pretty much hardcoded in the preprocess/finalize functions anyway so you will have to work if you want to enable AVX with its 256-bit vectors.
 #  define VZERO() _mm_setzero_ps()
-- 
2.37.3

