From aadee7d321f47306988cc1424c784a5e1389e54a Mon Sep 17 00:00:00 2001
From: Yann Collette <ycollette.nospam@free.fr>
Date: Sun, 16 Oct 2022 22:53:26 +0200
Subject: [PATCH] aarch64

---
 arch.mk                    |  3 +++
 compile.mk                 |  9 +++++----
 dep.mk                     |  2 +-
 include/simd/sse_mathfun.h |  3 ++-
 include/simd/vector.hpp    |  3 ++-
 src/engine/Engine.cpp      | 10 +++++-----
 6 files changed, 18 insertions(+), 12 deletions(-)

diff --git a/arch.mk b/arch.mk
index 5a86caa..e0f7d45 100644
--- a/arch.mk
+++ b/arch.mk
@@ -15,6 +15,9 @@ else ifneq (, $(findstring mingw, $(MACHINE)))
 else ifneq (, $(findstring linux, $(MACHINE)))
 	ARCH_LIN := 1
 	ARCH := lin
+else ifneq (,$(findstring aarch64,$(MACHINE)))
+	ARCH_AARCH64 := 1
+	ARCH_NAME := aarch64
 else
 $(error Could not determine architecture of $(MACHINE). Try hacking around in arch.mk)
 endif
diff --git a/compile.mk b/compile.mk
index 96ea4b8..b3a4ca2 100644
--- a/compile.mk
+++ b/compile.mk
@@ -12,7 +12,7 @@ FLAGS += -MMD -MP
 # Debugger symbols. These are removed with `strip`.
 FLAGS += -g
 # Optimization
-FLAGS += -O3 -march=nocona -funsafe-math-optimizations
+FLAGS += -O2 -march=armv8-a -mtune=cortex-a53 -funsafe-math-optimizations
 # Warnings
 FLAGS += -Wall -Wextra -Wno-unused-parameter
 # C++ standard
@@ -78,12 +78,13 @@ build/%.m.o: %.m
 
 build/%.bin.o: %
 	@mkdir -p $(@D)
-ifdef ARCH_LIN
-	$(OBJCOPY) -I binary -O elf64-x86-64 -B i386:x86-64 --rename-section .data=.rodata,alloc,load,readonly,data,contents $< $@
-endif
 ifdef ARCH_WIN
+ifdef ARCH_AARCH64
+	$(OBJCOPY) -I binary -O elf64-littleaarch64 -B aarch64 --rename-section .data=.rodata,alloc,load,readonly,data,contents $< $@
+else
 	$(OBJCOPY) -I binary -O pe-x86-64 -B i386:x86-64 --rename-section .data=.rodata,alloc,load,readonly,data,contents $< $@
 endif
+endif
 ifdef ARCH_MAC
 	@# Apple makes this needlessly complicated, so just generate a C file with an array.
 	xxd -i $< | $(CC) $(MAC_SDK_FLAGS) -c -o $@ -xc -
diff --git a/dep.mk b/dep.mk
index bad90ec..5f18ce6 100644
--- a/dep.mk
+++ b/dep.mk
@@ -5,7 +5,7 @@ DEP_LOCAL ?= dep
 $(shell mkdir -p $(DEP_LOCAL))
 DEP_PATH := $(abspath $(DEP_LOCAL))
 
-DEP_FLAGS += -g -O3 -march=nocona
+DEP_FLAGS += -g -O2 -march=armv8-a -mtune=cortex-a53
 
 ifeq ($(ARCH), mac)
 	DEP_MAC_SDK_FLAGS := -mmacosx-version-min=10.7
diff --git a/include/simd/sse_mathfun.h b/include/simd/sse_mathfun.h
index 8f703f9..f9cdecd 100644
--- a/include/simd/sse_mathfun.h
+++ b/include/simd/sse_mathfun.h
@@ -43,7 +43,8 @@ This derived source file is released under the zlib license.
   (this is the zlib license)
 */
 #pragma once
-#include <pmmintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/sse2.h>
 
 
 /** Generate 1.f without accessing memory */
diff --git a/include/simd/vector.hpp b/include/simd/vector.hpp
index 566b26a..acbb51c 100644
--- a/include/simd/vector.hpp
+++ b/include/simd/vector.hpp
@@ -1,6 +1,7 @@
 #pragma once
 #include <cstring>
-#include <pmmintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/sse2.h>
 
 
 namespace rack {
diff --git a/src/engine/Engine.cpp b/src/engine/Engine.cpp
index ee0e64b..55d3ac4 100644
--- a/src/engine/Engine.cpp
+++ b/src/engine/Engine.cpp
@@ -10,7 +10,8 @@
 #include <mutex>
 #include <atomic>
 #include <tuple>
-#include <pmmintrin.h>
+#define SIMDE_ENABLE_NATIVE_ALIASES
+#include <simde/x86/sse2.h>
 
 
 namespace rack {
@@ -21,9 +22,8 @@ static void initMXCSR() {
 	// Set CPU to flush-to-zero (FTZ) and denormals-are-zero (DAZ) mode
 	// https://software.intel.com/en-us/node/682949
 	_MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);
-	_MM_SET_DENORMALS_ZERO_MODE(_MM_DENORMALS_ZERO_ON);
 	// Reset other flags
-	_MM_SET_ROUNDING_MODE(_MM_ROUND_NEAREST);
+	_MM_SET_ROUNDING_MODE(SIMDE_MM_ROUND_NEAREST);
 }
 
 
@@ -93,7 +93,7 @@ struct SpinBarrier {
 		}
 		else {
 			while (count != 0) {
-				_mm_pause();
+				asm volatile("yield" ::: "memory");
 			}
 		}
 	}
@@ -131,7 +131,7 @@ struct HybridBarrier {
 		while (!yield) {
 			if (count == 0)
 				return;
-			_mm_pause();
+			asm volatile("yield" ::: "memory");
 		}
 
 		// Wait on mutex
-- 
2.37.3

